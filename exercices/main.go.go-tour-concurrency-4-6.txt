package main

import (
	"fmt"
	"time"
)

func sendData(ch chan int) {
	for i := 1; i <= 5; i++ {
		ch <- i
		time.Sleep(1 * time.Second)
	}
	close(ch)
}

func sendMessage(ch chan string) {
	for i := 1; i <= 3; i++ {
		ch <- fmt.Sprintf("Message %d", i)
		time.Sleep(2 * time.Second)
	}
	close(ch)
}

func main() {
	ch1 := make(chan int)
	ch2 := make(chan string)

	go sendData(ch1)
	go sendMessage(ch2)

	for {
		select {
		case v1, ok := <-ch1:
			if !ok {
				ch1 = nil
			} else {
				fmt.Println("Received from ch1:", v1)
			}
		case v2, ok := <-ch2:
			if !ok {
				ch2 = nil
			} else {
				fmt.Println("Received from ch2:", v2)
			}
		}

		if ch1 == nil && ch2 == nil {package main

import (
	"fmt"
	"time"
)

func sendData(ch chan int) {
	for i := 1; i <= 5; i++ {
		ch <- i
		time.Sleep(1 * time.Second)
	}
	close(ch)
}

func sendMessage(ch chan string) {
	for i := 1; i <= 3; i++ {
		ch <- fmt.Sprintf("Message %d", i)
		time.Sleep(2 * time.Second)
	}
	close(ch)
}

func main() {
	ch1 := make(chan int)
	ch2 := make(chan string)

	go sendData(ch1)
	go sendMessage(ch2)

	for {
		select {
		case v1, ok := <-ch1:
			if !ok {
				ch1 = nil
			} else {
				fmt.Println("Received from ch1:", v1)
			}
		case v2, ok := <-ch2:
			if !ok {
				ch2 = nil
			} else {
				fmt.Println("Received from ch2:", v2)
			}
		default:
			fmt.Println("Waiting for data...")
			time.Sleep(500 * time.Millisecond)
		}

		if ch1 == nil && ch2 == nil {
			break
		}
	}

	fmt.Println("Both channels closed, program exiting.")
}

			break
		}
	}

	fmt.Println("Both channels closed, program exiting.")
}
